<?xml version="1.0" encoding="UTF-8"?>
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core">
    <p>
        The <code>dockerFlow</code> variable offers convenient way to run Docker continuous deployment flow.
    </p>
    <p>
        For more information about the goals of the plugin and examples, please visit <a href="TODO">TODO</a>.
    </p>
    <p>
        Reference:
    </p>
    <dl>
        <dt><code>init(args)</code></dt>
        <dd>
            <p>
                Creates a <code>Flow</code> object with specified arguments.
                The initialization is requited before invoking any steps.
                The currently allowed arguments are as follows.
                <dl>
                    <p>
                        <dt><code>target</code></dt>
                        <dd>
                            The primary <a href="https://docs.docker.com/compose/">Docker Compose</a> target.
                            This argument is <b>mandatory</b>.
                        </dd>
                        <dt><code>project</code></dt>
                        <dd>
                            The name of the project (equivalent to <a href="https://docs.docker.com/compose/">Docker Compose</a> argument <code>-p</code>.
                            This argument is <b>mandatory</b>.
                        </dd>
                        <dt><code>scAddress</code></dt>
                        <dd>
                            Service discovery address.
                            At the moment, only <a href="https://www.consul.io/">Consul</a> is supported.
                            This argument is <b>mandatory</b>.
                        </dd>
                        <dt><code>composePath</code></dt>
                        <dd>
                            Path to the <a href="https://docs.docker.com/compose/">Docker Compose</a> configuration file.
                            Defaults to <code>docker-compose.yml</code>.
                        </dd>
                        <dt><code>blueGreen</code></dt>
                        <dd>
                            Whether to perform <code>blue-green deployment</code>.
                            Defaults to <code>true</code>.
                        </dd>
                        <dt><code>sideTargets</code></dt>
                        <dd>
                            The list of side (or secondary) targets.
                            The value should be specified as a list (e.g. ["target1", "target1"]).
                        </dd>
                        <dt><code>pullTarget</code></dt>
                        <dd>
                            Whether to pull the <code>target</code> before deployment.
                            Defaults to <code>true</code>.
                        </dd>
                        <dt><code>pullSideTargets</code></dt>
                        <dd>
                            Whether to pull side (or secondary) targets before deployment.
                            Defaults to <code>false</code>.
                        </dd>
                        <dt><code>scale</code></dt>
                        <dd>
                            Number of instances to deploy or scale.
                            If the value starts with the plus sign (+), the number of instances will be increased by the given number.
                            If the value begins with the minus sign (-), the number of instances will be decreased by the given number.
                        </dd>
                        Argument should be specified as a Groovy Map.
                        <pre><code>
def flow = dockerFlow.init(
    project: "books-ms",
    scAddress: "http://192.168.99.100:8500",
    target: "app",
    sideTargets: ["db"])
                        </code></pre>
                        Once the object has been initialized, we can specify <code>Flow</code> steps (see below).
                        If a remote Docker is used, steps can be run inside <code>withEnv</code> block.
                        <pre><code>
withEnv([
    "DOCKER_HOST=tcp://192.168.99.100:2376"
]) {
    flow.deploy()
    flow.scale()
    flow.stopOld()
}
                        </code></pre>
                    </p>
                </dl>
            </p>
        </dd>
        <dt><code>deploy()</code></dt>
        <dd>
            <p>
                Deploys a new release.
            </p>
        </dd>
        <dt><code>scale()</code></dt>
        <dd>
            <p>
                Scales currently running release.
            </p>
        </dd>
        <dt><code>stop-old()</code></dt>
        <dd>
            <p>
                Stops the old release
            </p>
        </dd>
    </dl>
</j:jelly>
